// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  email    String   @unique
  password String
  role     String   @default("user")
  characters Character[]
}

model Character {
  id            Int    @id @default(autoincrement())
  name          String @unique @default("Player")
  userId        Int
  jobclassId    Int
  str           Int
  agi           Int
  vit           Int
  int           Int
  dex           Int
  luk           Int
  baseLevel     Int
  jobLevel      Int
  baseExp       Int
  jobExp        Int
  maxBaseExp    Int
  maxJobExp     Int
  skillPoints   Int
  health        Int
  maxHealth     Int
  maxMana       Int
  mana          Int
  attackPower   Int
  magicPower    Int
  defense       Int
  magicDefense  Int
  inventory     Inventory[]
  equipment     Equipment[]
  user          User   @relation(fields: [userId], references: [id])

  // Fields to store the calculated total stats
  totalAttackPower Int @default(0)
  totalMagicPower  Int @default(0)
  totalDefense     Int @default(0)
  totalMagicDefense Int @default(0)
  totalHealth      Int @default(0)
  totalMana        Int @default(0)
  totalStr         Int @default(0)
  totalAgi         Int @default(0)
  totalVit         Int @default(0)
  totalInt         Int @default(0)
  totalDex         Int @default(0)
  totalLuk         Int @default(0)
}

model Inventory {
  id           Int       @id @default(autoincrement())
  characterId  Int
  itemId       Int
  quantity     Int
  location  String @default("inventory")
  character    Character @relation(fields: [characterId], references: [id])
  item         Item      @relation(fields: [itemId], references: [id])
}

model Equipment {
  id              Int       @id @default(autoincrement())
  characterId     Int
  upperHeadSlot   Int?
  midHeadSlot     Int?
  lowerHeadSlot   Int?
  bodySlot        Int?
  rightHandSlot   Int?
  leftHandSlot    Int?
  robeSlot        Int?
  shoesSlot       Int?
  accessorySlot01 Int?
  accessorySlot02 Int?
  ammoSlot        Int?
  character       Character @relation(fields: [characterId], references: [id])
}

model Enemy {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  attackType       String
  giveBaseExpAmount Int
  giveJobExpAmount Int
  health           Int
  maxHealth        Int
  attackPower      Int
  magicPower       Int
  defense          Int
  magicDefense     Int
  baseLevel        Int
  monsterType      String
  itemDrops        EnemyDrop[]
}

model EnemyDrop {
  id         Int   @id @default(autoincrement())
  enemyId    Int
  itemId     Int
  dropChance Float
  enemy      Enemy @relation(fields: [enemyId], references: [id])
  item       Item  @relation(fields: [itemId], references: [id])
  @@unique([enemyId, itemId])
}

model Item {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  itemType      String   @default("None")
  itemSubType   String   @default("None")
  equipmentSlot String   @default("None")
  description   String
  price         Int
  attackPower   Int
  magicPower    Int
  defense       Int
  magicDefense  Int
  health        Int
  mana          Int
  str           Int
  agi           Int
  vit           Int
  int           Int
  dex           Int
  luk           Int
  slot          Int
  weaponType    String
  usable        Boolean
  rarity        String
  effect        String?
  equipable     Boolean
  enemyDrops    EnemyDrop[]
  inventory     Inventory[]
}

model JobClass {
  id            Int  @id @default(autoincrement())
  name          String @unique
  str           Int
  agi           Int
  vit           Int
  int           Int
  dex           Int
  luk           Int
  health        Int
  mana          Int
  maxHealth     Int
  maxMana       Int
  attackPower   Int
  magicPower    Int
  defense       Int
  magicDefense  Int
  baseLevel     Int
  jobLevel      Int
  baseExp       Int
  jobExp        Int
  maxBaseExp    Int
  maxJobExp     Int
  skillPoints   Int
  // skillTree   Skill[]
}
