// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  email           String            @unique
  password        String
  role            String            @default("user")
  characters      Character[]
  userSession     UserSession[]
  generalInventory GeneralInventory[] // Relación con el inventario general
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  @@unique([username, email])
}

model UserSession {
  id         String     @id @default(uuid())
  userId     Int
  token      String @unique 
  expiresAt  Int
  user       User    @relation(fields: [userId], references: [id])
}

model Character {
  id              Int             @id @default(autoincrement())
  name            String          @unique @default("Player")
  userId          Int
  jobclassId      Int
  str             Int
  agi             Int
  vit             Int
  int             Int
  dex             Int
  luk             Int
  baseLevel       Int
  jobLevel        Int
  baseExp         Int
  jobExp          Int
  maxBaseExp      Int
  maxJobExp       Int
  skillPoints     Int
  health          Int
  maxHealth       Int
  maxMana         Int
  mana            Int
  attackPower     Int 
  magicPower      Int
  defense         Int
  magicDefense    Int
  gender          String  @default("M")
  inventory       Inventory[]     // Relación con el inventario del personaje
  equipmentSlot   EquipmentSlot[]
  items           ItemInstance[]
  jobclass        JobClass  @relation(fields: [jobclassId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  characterSkills CharacterSkill[] 
  @@unique([userId, name]) // Garantizar que un usuario no tenga personajes con el mismo nombre
}

model Inventory {
  id             Int          @id @default(autoincrement())
  itemId         Int?
  characterId    Int?
  itemInstanceId Int?         // Referencia opcional a la instancia de ítem
  quantity       Int          @default(1)
  character      Character?   @relation(fields: [characterId], references: [id])
  itemInstance   ItemInstance? @relation(fields: [itemInstanceId], references: [id])
  item           Item?         @relation(fields: [itemId], references: [id])
}

model GeneralInventory {
  id         Int     @id @default(autoincrement())
  userId     Int
  itemId     Int
  quantity   Int      @default(1)
  user       User     @relation(fields: [userId], references: [id])
  item       Item     @relation(fields: [itemId], references: [id])
  @@unique([userId, itemId]) // Garantizar que un usuario no tenga duplicados del mismo ítem en el inventario general
}

model Item {
  id            Int      @id 
  name          String   @unique
  itemType      String   @default("None")
  itemSubType   String   @default("None")
  equipmentSlot String?   @default("None")
  description   String
  price         Int
  attackPower   Int
  magicPower    Int
  defense       Int
  magicDefense  Int
  health        Int
  mana          Int
  str           Int
  agi           Int
  vit           Int
  int           Int
  dex           Int
  luk           Int
  slot          Int
  weaponType    String
  usable        Boolean
  rarity        String
  effect        String?
  equipable     Boolean
  inventory     Inventory[]
  enemyDrops    EnemyDrop[]
  itemIcon      String @default("")
  GeneralInventory GeneralInventory[]
}

model ItemTemplate {
  id            Int      @id 
  name          String   @unique
  itemType      String   @default("None")
  itemSubType   String   @default("None")
  equipmentSlot String
  description   String
  price         Int
  attackPower   Int
  magicPower    Int
  defense       Int
  magicDefense  Int
  health        Int
  mana          Int
  str           Int
  agi           Int
  vit           Int
  int           Int
  dex           Int
  luk           Int
  slot          Int
  weaponType    String
  usable        Boolean
  rarity        String
  effect        String?
  equipable     Boolean
  itemInstances ItemInstance[]
  itemIcon      String
}

model ItemInstance {
  id            Int       @id
  itemTemplateId Int
  characterId    Int
  currentAttack  Int
  currentDefense Int
  currentHealth  Int
  currentMana    Int
  upgradeLevel   Int          @default(0) // Nivel de mejora o mejora
  socketedGems   String?      // JSON o texto para cualquier gema o runa
  enchantments   String?      // JSON o texto para encantamientos adicionales
  itemTemplate   ItemTemplate @relation(fields: [itemTemplateId], references: [id])
  character      Character    @relation(fields: [characterId], references: [id])
  inventory      Inventory[]
}

model EquipmentSlot {
  id            Int      @id @default(autoincrement())
  characterId     Int
  upperHeadSlot   Int?
  midHeadSlot     Int?
  lowerHeadSlot   Int?
  bodySlot        Int?
  rightHandSlot   Int?
  leftHandSlot    Int?
  robeSlot        Int?
  shoesSlot       Int?
  accessorySlot01 Int?
  accessorySlot02 Int?
  ammoSlot        Int?
  character       Character @relation(fields: [characterId], references: [id])
}

model Enemy {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  attackType       String
  giveBaseExpAmount Int
  giveJobExpAmount Int
  health           Int
  maxHealth        Int
  attackPower      Int
  magicPower       Int
  defense          Int
  magicDefense     Int
  baseLevel        Int
  monsterType      String
  itemDrops        EnemyDrop[]
  mobIcon          String    @default("")
}

model EnemyDrop {
  id         Int   @id @default(autoincrement())
  enemyId    Int
  itemId     Int
  dropChance Float
  enemy      Enemy @relation(fields: [enemyId], references: [id])
  item       Item  @relation(fields: [itemId], references: [id])
  @@unique([enemyId, itemId])
}

model JobClass {
  id            Int  @id
  name          String @unique
  str           Int
  agi           Int
  vit           Int
  int           Int
  dex           Int
  luk           Int
  health        Int
  mana          Int
  maxHealth     Int
  maxMana       Int
  attackPower   Int
  magicPower    Int
  defense       Int
  magicDefense  Int
  baseLevel     Int
  jobLevel      Int
  baseExp       Int
  jobExp        Int
  maxBaseExp    Int
  maxJobExp     Int
  skillPoints   Int
  characters      Character[]
  skills         Skill[]  
  skillTree      SkillTree[]
}

model Skill {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  jobclassId  Int
  level       Int      @default(1) // Skill level
  maxLevel    Int      @default(10) // Maximum skill level
  requiredLevel Int    @default(1) // Required base/job level to learn
  spCost      Int      @default(1) // Skill points cost
  cooldown    Int      @default(0) // Cooldown in seconds
  effect      String?  // JSON or text for skill effects
  jobclass    JobClass @relation(fields: [jobclassId], references: [id])
  skillTree   SkillTree[]
  characterSkills CharacterSkill[]
}

model SkillTree {
  id          Int      @id @default(autoincrement())
  jobclassId  Int
  skillId     Int
  requiredSkillId Int? // Required skill to unlock this skill
  jobclass    JobClass @relation(fields: [jobclassId], references: [id])
  skill       Skill    @relation(fields: [skillId], references: [id])
}

model CharacterSkill {
  id          Int      @id @default(autoincrement())
  characterId Int
  skillId     Int
  level       Int      @default(1) // Current skill level
  character   Character @relation(fields: [characterId], references: [id])
  skill       Skill     @relation(fields: [skillId], references: [id])
  @@unique([characterId, skillId]) // Prevent duplicate skills for a character
}